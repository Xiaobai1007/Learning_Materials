单例模式（Singleton），也叫单子模式，是一种常用的设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候，整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息，显然，这种方式简化了在复杂环境下的配置管理。

单例模式就是为确保一个类只有一个实例，并为整个系统提供一个全局访问点的一种方法。

实现单例模式的思路是：定义私有对象的引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例

三要素：
	私有的构造方法；
	指向自己实例的私有静态引用；
	以自己实例为返回值的静态的公有方法。

单例模式的优点：
	在内存中只有一个对象，节省内存空间；
	避免频繁的创建销毁对象，可以提高性能；
	避免对共享资源的多重占用，简化访问；
	为整个系统提供一个全局访问点。
	
单例模式的实现中主要有2种方式，一种是在调用方法的时候进行实例化的工作，这种方式俗称懒汉模式，而另外一种方式是在类的加载的时候就创建一个实例，这种方式俗称饿汉模式。
	
常用多线程单实例：Servlet创建
